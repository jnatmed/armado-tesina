{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "896f8e2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Procesando dataset: breast+cancer+wisconsin+original\n",
      "‚úì Resultados guardados para breast+cancer+wisconsin+original\n",
      "\n",
      "Procesando dataset: diabetes\n",
      "No se encontr√≥ archivo .data en diabetes, se omite.\n",
      "Procesando dataset: ecoli\n",
      "‚ö†Ô∏è Saltando ecoli por tener una sola clase despu√©s de limpieza\n",
      "Procesando dataset: glass+identification\n",
      "‚úì Resultados guardados para glass+identification\n",
      "\n",
      "Procesando dataset: heart+disease\n",
      "‚ö†Ô∏è Saltando heart+disease por tener una sola clase despu√©s de limpieza\n"
     ]
    }
   ],
   "source": [
    "# üîπ 1. Importaci√≥n de librer√≠as necesarias\n",
    "# ‚úÖ Se importan todas las librer√≠as necesarias para:\n",
    "\n",
    "# Manipular archivos (os)\n",
    "\n",
    "# Cargar y procesar datos (pandas, numpy)\n",
    "\n",
    "# Modelado y m√©tricas (sklearn)\n",
    "\n",
    "# T√©cnicas de sobremuestreo (imblearn)\n",
    "\n",
    "# Visualizaci√≥n (seaborn, matplotlib)\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from imblearn.over_sampling import SMOTE, ADASYN, BorderlineSMOTE\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "\n",
    "\n",
    "# üîπ 2. Preparaci√≥n de carpetas de salida\n",
    "# Crear carpetas de salida\n",
    "# ‚úÖ Se crean las carpetas donde se guardar√°n los gr√°ficos (figures) y los resultados tabulares (resultados).\n",
    "os.makedirs(\"../figures\", exist_ok=True)\n",
    "os.makedirs(\"../resultados\", exist_ok=True)\n",
    "\n",
    "\n",
    "# üîπ 3. Definici√≥n de modelos y t√©cnicas de sobremuestreo\n",
    "# ‚úÖ Se definen tres modelos de clasificaci√≥n y tres t√©cnicas de sobremuestreo. Se usar√°n todas las combinaciones posibles entre ellos.\n",
    "# Modelos\n",
    "modelos = {\n",
    "    \"RandomForest\": RandomForestClassifier(random_state=42),\n",
    "    \"LogisticRegression\": LogisticRegression(max_iter=1000),\n",
    "    \"KNN\": KNeighborsClassifier()\n",
    "}\n",
    "\n",
    "# T√©cnicas de sobremuestreo\n",
    "tecnicas = {\n",
    "    \"SMOTE\": SMOTE(random_state=42),\n",
    "    \"ADASYN\": ADASYN(random_state=42),\n",
    "    \"BorderlineSMOTE\": BorderlineSMOTE(random_state=42)\n",
    "}\n",
    "\n",
    "# üîπ 4. Funci√≥n para convertir valores tipo '1-9' a su promedio\n",
    "# ‚úÖ Si una celda tiene un valor como '1-9', se convierte al promedio (5.0). Si no, se deja igual.\n",
    "# Funci√≥n para convertir valores tipo '1-9' a su promedio (5.0)\n",
    "def convertir_rango(valor):\n",
    "    if isinstance(valor, str) and '-' in valor:\n",
    "        try:\n",
    "            inicio, fin = map(float, valor.split('-'))\n",
    "            return (inicio + fin) / 2\n",
    "        except:\n",
    "            return np.nan\n",
    "    return valor\n",
    "\n",
    "# Obtener la lista de carpetas que representan datasets\n",
    "ruta_datasets = \"../datasets\"\n",
    "datasets = [d for d in os.listdir(ruta_datasets) if os.path.isdir(os.path.join(ruta_datasets, d))]\n",
    "\n",
    "# Iterar sobre cada dataset\n",
    "for nombre_dataset in datasets:\n",
    "    print(f\"Procesando dataset: {nombre_dataset}\")\n",
    "    carpeta = os.path.join(ruta_datasets, nombre_dataset)\n",
    "\n",
    "    # Buscar archivo .data dentro del dataset\n",
    "    archivos_data = [f for f in os.listdir(carpeta) if f.endswith(\".data\")]\n",
    "    if not archivos_data:\n",
    "        print(f\"No se encontr√≥ archivo .data en {nombre_dataset}, se omite.\")\n",
    "        continue\n",
    "\n",
    "    path_data = os.path.join(carpeta, archivos_data[0])\n",
    "\n",
    "    try:\n",
    "        # Intentar cargar el archivo como CSV con separador por coma\n",
    "        df = pd.read_csv(path_data, header=None, na_values='?')\n",
    "        if df.shape[1] <= 1:\n",
    "            # Si solo hay una columna, probar con separador por espacio\n",
    "            df = pd.read_csv(path_data, header=None, na_values='?', sep='\\s+')\n",
    "\n",
    "        # Eliminar la primera fila si contiene encabezados de texto\n",
    "        if df.iloc[0].apply(lambda x: isinstance(x, str) and not x.replace('.', '', 1).isdigit()).any():\n",
    "            df = df.iloc[1:].reset_index(drop=True)\n",
    "\n",
    "    # Fallback en caso de error de codificaci√≥n\n",
    "    except UnicodeDecodeError:\n",
    "        try:\n",
    "            df = pd.read_csv(path_data, header=None, na_values='?', encoding='latin1', sep='\\s+', on_bad_lines='skip')\n",
    "        except Exception as e2:\n",
    "            print(f\"‚ùå Error cargando {nombre_dataset} con latin1: {e2}\")\n",
    "            continue\n",
    "    except Exception as e:\n",
    "        print(f\"‚ùå Error cargando {nombre_dataset}: {e}\")\n",
    "        continue\n",
    "\n",
    "    try:\n",
    "        # Si la primera columna es texto (ID o similar), eliminarla\n",
    "        if df.dtypes[0] == 'object':\n",
    "            df = df.drop(columns=df.columns[0])\n",
    "\n",
    "        # Convertir todos los valores a string y aplicar la conversi√≥n de rangos\n",
    "        df = df.astype(str).apply(lambda col: col.map(convertir_rango))\n",
    "\n",
    "        # Limpieza profunda: reemplazo de '?', conversi√≥n a num√©rico y eliminaci√≥n de NaN\n",
    "        df.replace('?', np.nan, inplace=True)\n",
    "        df = df.apply(pd.to_numeric, errors='coerce')\n",
    "        df.dropna(inplace=True)\n",
    "\n",
    "        # Separar variables predictoras y etiqueta\n",
    "        X = df.iloc[:, :-1]\n",
    "        y = df.iloc[:, -1]\n",
    "\n",
    "        # Saltear datasets con una sola clase\n",
    "        if len(np.unique(y)) < 2:\n",
    "            print(f\"‚ö†Ô∏è Saltando {nombre_dataset} por tener una sola clase despu√©s de limpieza\")\n",
    "            continue\n",
    "\n",
    "        # Escalado de caracter√≠sticas\n",
    "        scaler = StandardScaler()\n",
    "        X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "        resultados = []\n",
    "\n",
    "        # Evaluaci√≥n de cada combinaci√≥n modelo + t√©cnica de sobremuestreo\n",
    "        for nombre_modelo, modelo in modelos.items():\n",
    "            for nombre_tecnica, sampler in tecnicas.items():\n",
    "                # Aplicar sobremuestreo\n",
    "                X_res, y_res = sampler.fit_resample(X_scaled, y)\n",
    "\n",
    "                # Filtrado por tama√±o m√≠nimo de clase para evitar errores en KNN y Borderline\n",
    "                min_clase = min(Counter(y_res).values())\n",
    "                if \"Borderline\" in nombre_tecnica and min_clase < 6:\n",
    "                    print(f\"‚ö†Ô∏è Saltando {nombre_dataset} - {nombre_modelo} + {nombre_tecnica} (clase minoritaria < 6)\")\n",
    "                    continue\n",
    "                if \"KNN\" in nombre_modelo and min_clase < 6:\n",
    "                    print(f\"‚ö†Ô∏è Saltando {nombre_dataset} - {nombre_modelo} + {nombre_tecnica} (muy pocas muestras para KNN)\")\n",
    "                    continue\n",
    "\n",
    "                # Divisi√≥n train-test\n",
    "                X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
    "\n",
    "                # Entrenamiento y predicci√≥n\n",
    "                modelo.fit(X_train, y_train)\n",
    "                y_pred = modelo.predict(X_test)\n",
    "\n",
    "                # Reporte de m√©tricas y matriz de confusi√≥n\n",
    "                report = classification_report(y_test, y_pred, output_dict=True)\n",
    "                cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "                # Guardar figura de la matriz de confusi√≥n\n",
    "                plt.figure(figsize=(5, 4))\n",
    "                sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
    "                plt.title(f\"{nombre_dataset} - {nombre_modelo} + {nombre_tecnica}\")\n",
    "                plt.xlabel(\"Predicci√≥n\")\n",
    "                plt.ylabel(\"Real\")\n",
    "                plt.tight_layout()\n",
    "                plt.savefig(f\"../figures/{nombre_dataset}_{nombre_modelo}_{nombre_tecnica}_heatmap.png\")\n",
    "                plt.close()\n",
    "\n",
    "                # Registro de resultados para an√°lisis comparativo\n",
    "                labels = list(map(str, sorted(np.unique(y))))\n",
    "                entry = {\n",
    "                    \"Dataset\": nombre_dataset,\n",
    "                    \"Modelo\": nombre_modelo,\n",
    "                    \"T√©cnica\": nombre_tecnica,\n",
    "                    \"Accuracy\": report.get(\"accuracy\", 0)\n",
    "                }\n",
    "                for label in labels:\n",
    "                    if label in report:\n",
    "                        entry[f\"Precision ({label})\"] = report[label][\"precision\"]\n",
    "                        entry[f\"Recall ({label})\"] = report[label][\"recall\"]\n",
    "                        entry[f\"F1-score ({label})\"] = report[label][\"f1-score\"]\n",
    "                    else:\n",
    "                        entry[f\"Precision ({label})\"] = None\n",
    "                        entry[f\"Recall ({label})\"] = None\n",
    "                        entry[f\"F1-score ({label})\"] = None\n",
    "                resultados.append(entry)\n",
    "\n",
    "        # Exportar resultados a CSV\n",
    "        df_resultados = pd.DataFrame(resultados)\n",
    "        df_resultados.to_csv(f\"../resultados/resultados_{nombre_dataset}.csv\", index=False)\n",
    "        print(f\"‚úì Resultados guardados para {nombre_dataset}\\n\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"‚ùå Error procesando {nombre_dataset}: {e}\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b06b5c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úì Archivo resumen generado: resultados_globales.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Modelo</th>\n",
       "      <th>T√©cnica</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision (2)</th>\n",
       "      <th>Recall (2)</th>\n",
       "      <th>F1-score (2)</th>\n",
       "      <th>Precision (4)</th>\n",
       "      <th>Recall (4)</th>\n",
       "      <th>F1-score (4)</th>\n",
       "      <th>Dataset</th>\n",
       "      <th>...</th>\n",
       "      <th>F1-score (3)</th>\n",
       "      <th>Precision (5)</th>\n",
       "      <th>Recall (5)</th>\n",
       "      <th>F1-score (5)</th>\n",
       "      <th>Precision (6)</th>\n",
       "      <th>Recall (6)</th>\n",
       "      <th>F1-score (6)</th>\n",
       "      <th>Precision (7)</th>\n",
       "      <th>Recall (7)</th>\n",
       "      <th>F1-score (7)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>RandomForest</td>\n",
       "      <td>SMOTE</td>\n",
       "      <td>0.985019</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.985612</td>\n",
       "      <td>0.985612</td>\n",
       "      <td>0.985612</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>RandomForest</td>\n",
       "      <td>ADASYN</td>\n",
       "      <td>0.981132</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.961240</td>\n",
       "      <td>0.980237</td>\n",
       "      <td>0.964539</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.981949</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>RandomForest</td>\n",
       "      <td>BorderlineSMOTE</td>\n",
       "      <td>0.992509</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.992126</td>\n",
       "      <td>0.985816</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.992857</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>SMOTE</td>\n",
       "      <td>0.970037</td>\n",
       "      <td>0.954545</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.969231</td>\n",
       "      <td>0.985185</td>\n",
       "      <td>0.956835</td>\n",
       "      <td>0.970803</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LogisticRegression</td>\n",
       "      <td>ADASYN</td>\n",
       "      <td>0.984906</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.968992</td>\n",
       "      <td>0.984252</td>\n",
       "      <td>0.971429</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.985507</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows √ó 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Modelo          T√©cnica  Accuracy  Precision (2)  Recall (2)  \\\n",
       "0        RandomForest            SMOTE  0.985019       0.984375    0.984375   \n",
       "1        RandomForest           ADASYN  0.981132       1.000000    0.961240   \n",
       "2        RandomForest  BorderlineSMOTE  0.992509       1.000000    0.984375   \n",
       "3  LogisticRegression            SMOTE  0.970037       0.954545    0.984375   \n",
       "4  LogisticRegression           ADASYN  0.984906       1.000000    0.968992   \n",
       "\n",
       "   F1-score (2)  Precision (4)  Recall (4)  F1-score (4) Dataset  ...  \\\n",
       "0      0.984375       0.985612    0.985612      0.985612     NaN  ...   \n",
       "1      0.980237       0.964539    1.000000      0.981949     NaN  ...   \n",
       "2      0.992126       0.985816    1.000000      0.992857     NaN  ...   \n",
       "3      0.969231       0.985185    0.956835      0.970803     NaN  ...   \n",
       "4      0.984252       0.971429    1.000000      0.985507     NaN  ...   \n",
       "\n",
       "   F1-score (3)  Precision (5)  Recall (5)  F1-score (5)  Precision (6)  \\\n",
       "0           NaN            NaN         NaN           NaN            NaN   \n",
       "1           NaN            NaN         NaN           NaN            NaN   \n",
       "2           NaN            NaN         NaN           NaN            NaN   \n",
       "3           NaN            NaN         NaN           NaN            NaN   \n",
       "4           NaN            NaN         NaN           NaN            NaN   \n",
       "\n",
       "   Recall (6)  F1-score (6)  Precision (7)  Recall (7)  F1-score (7)  \n",
       "0         NaN           NaN            NaN         NaN           NaN  \n",
       "1         NaN           NaN            NaN         NaN           NaN  \n",
       "2         NaN           NaN            NaN         NaN           NaN  \n",
       "3         NaN           NaN            NaN         NaN           NaN  \n",
       "4         NaN           NaN            NaN         NaN           NaN  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from glob import glob\n",
    "\n",
    "# BLOQUE FINAL: combinar todos los resultados parciales en un √∫nico CSV global\n",
    "archivos_resultados = glob(\"../resultados/resultados_*.csv\")\n",
    "if archivos_resultados:\n",
    "    df_global = pd.concat([pd.read_csv(f) for f in archivos_resultados], ignore_index=True)\n",
    "    df_global.to_csv(\"../resultados/resultados_globales.csv\", index=False)\n",
    "    print(\"‚úì Archivo resumen generado: resultados_globales.csv\")\n",
    "    display(df_global.head())\n",
    "else:\n",
    "    print(\"‚ö†Ô∏è No se encontraron archivos de resultados parciales para combinar.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b53abe1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(\"../resultados/resultados_globales.csv\")\n",
    "\n",
    "# Filtrar columnas de F1-score\n",
    "f1_cols = [col for col in df.columns if col.startswith(\"F1-score\")]\n",
    "\n",
    "# Calcular promedio de F1-score por fila (sin contar NaN)\n",
    "df[\"F1_mean\"] = df[f1_cols].mean(axis=1)\n",
    "\n",
    "# Agrupar y graficar\n",
    "plt.figure(figsize=(10, 5))\n",
    "sns.barplot(data=df, x=\"T√©cnica\", y=\"F1_mean\", hue=\"Modelo\")\n",
    "plt.title(\"F1-score promedio por T√©cnica y Modelo\")\n",
    "plt.ylabel(\"F1-score promedio\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "616ff0e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Modelo          T√©cnica  Accuracy                           Dataset\n",
      "19  RandomForest           ADASYN  0.992806              glass+identification\n",
      "46  RandomForest           ADASYN  0.992806              glass+identification\n",
      "20  RandomForest  BorderlineSMOTE  0.992701              glass+identification\n",
      "47  RandomForest  BorderlineSMOTE  0.992701              glass+identification\n",
      "45  RandomForest            SMOTE  0.992701              glass+identification\n",
      "18  RandomForest            SMOTE  0.992701              glass+identification\n",
      "29  RandomForest  BorderlineSMOTE  0.992509                               NaN\n",
      "11  RandomForest  BorderlineSMOTE  0.992509  breast+cancer+wisconsin+original\n",
      "2   RandomForest  BorderlineSMOTE  0.992509                               NaN\n",
      "38  RandomForest  BorderlineSMOTE  0.992509  breast+cancer+wisconsin+original\n"
     ]
    }
   ],
   "source": [
    "top_accuracy = df.sort_values(\"Accuracy\", ascending=False).head(10)\n",
    "print(top_accuracy[[\"Modelo\", \"T√©cnica\", \"Accuracy\", \"Dataset\"]])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dae52f19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pivot = df.pivot_table(values=\"F1-score (1)\", index=\"Modelo\", columns=\"T√©cnica\")\n",
    "sns.heatmap(pivot, annot=True, fmt=\".2f\", cmap=\"viridis\")\n",
    "plt.title(\"F1-score para clase 1\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
